// Generated by jextract

package jdk.internal.include.netinet;

import jdk.internal.include.common.RuntimeHelper;
import jdk.internal.include.common.Util;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;

import static java.lang.foreign.MemoryLayout.PathElement;

/**
 * {@snippet :
 * struct sockaddr_in {
 *     __uint8_t sin_len;
 *     sa_family_t sin_family;
 *     in_port_t sin_port;
 *     struct in_addr sin_addr;
 *     char sin_zero[8];
 * };
 * }
 */
public final class SockaddrInStruct {

    // Suppresses default constructor, ensuring non-instantiability.
    private SockaddrInStruct() {}

    private static final MemoryLayout LAYOUT = Util.networkOrder(sockaddr_in.$LAYOUT());

    public static MemoryLayout layout() {
        return LAYOUT;
    }
    static final VarHandle sin_len$VH = layout().varHandle(PathElement.groupElement("sin_len"));
    public static VarHandle sin_len$VH() {
        return SockaddrInStruct.sin_len$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __uint8_t sin_len;
     * }
     */
    public static byte sin_len$get(MemorySegment seg) {
        return (byte) SockaddrInStruct.sin_len$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __uint8_t sin_len;
     * }
     */
    public static void sin_len$set(MemorySegment seg, byte x) {
        SockaddrInStruct.sin_len$VH.set(seg, x);
    }
    public static byte sin_len$get(MemorySegment seg, long index) {
        return (byte) SockaddrInStruct.sin_len$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sin_len$set(MemorySegment seg, long index, byte x) {
        SockaddrInStruct.sin_len$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sin_family$VH = layout().varHandle(PathElement.groupElement("sin_family"));
    public static VarHandle sin_family$VH() {
        return SockaddrInStruct.sin_family$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * sa_family_t sin_family;
     * }
     */
    public static byte sin_family$get(MemorySegment seg) {
        return (byte) SockaddrInStruct.sin_family$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * sa_family_t sin_family;
     * }
     */
    public static void sin_family$set(MemorySegment seg, byte x) {
        SockaddrInStruct.sin_family$VH.set(seg, x);
    }
    public static byte sin_family$get(MemorySegment seg, long index) {
        return (byte) SockaddrInStruct.sin_family$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sin_family$set(MemorySegment seg, long index, byte x) {
        SockaddrInStruct.sin_family$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sin_port$VH = layout().varHandle(PathElement.groupElement("sin_port"));
    public static VarHandle sin_port$VH() {
        return SockaddrInStruct.sin_port$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * in_port_t sin_port;
     * }
     */
    public static short sin_port$get(MemorySegment seg) {
        return (short) SockaddrInStruct.sin_port$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * in_port_t sin_port;
     * }
     */
    public static void sin_port$set(MemorySegment seg, short x) {
        SockaddrInStruct.sin_port$VH.set(seg, x);
    }
    public static short sin_port$get(MemorySegment seg, long index) {
        return (short) SockaddrInStruct.sin_port$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sin_port$set(MemorySegment seg, long index, short x) {
        SockaddrInStruct.sin_port$VH.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct in_addr {
     *     in_addr_t s_addr;
     * };
     * }
     */
    public static final class in_addr {

        // Suppresses default constructor, ensuring non-instantiability.
        private in_addr() {}

        public static MemoryLayout layout() {
            return sockaddr_in.in_addr.$LAYOUT();
        }
        static final VarHandle s_addr$VH = layout().varHandle(PathElement.groupElement("s_addr"));
        public static VarHandle s_addr$VH() {
            return in_addr.s_addr$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * in_addr_t s_addr;
         * }
         */
        public static int s_addr$get(MemorySegment seg) {
            return (int) in_addr.s_addr$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * in_addr_t s_addr;
         * }
         */
        public static void s_addr$set(MemorySegment seg, int x) {
            in_addr.s_addr$VH.set(seg, x);
        }
        public static int s_addr$get(MemorySegment seg, long index) {
            return (int) in_addr.s_addr$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void s_addr$set(MemorySegment seg, long index, int x) {
            in_addr.s_addr$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return layout().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate(layout()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, layout()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, layout(), 1, scope); }
    }

    public static MemorySegment sin_addr$slice(MemorySegment seg) {
        return seg.asSlice(4, 4);
    }
    public static MemorySegment sin_zero$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static long sizeof() { return layout().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate(layout()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, layout()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, layout(), 1, scope); }
}


