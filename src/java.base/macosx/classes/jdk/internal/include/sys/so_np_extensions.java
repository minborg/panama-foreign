// Generated by jextract

package jdk.internal.include.sys;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;

import static java.lang.foreign.ValueLayout.PathElement;
public class so_np_extensions {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("npx_flags"),
        Constants$root.C_INT$LAYOUT.withName("npx_mask")
    ).withName("so_np_extensions");
    public static MemoryLayout $LAYOUT() {
        return so_np_extensions.$struct$LAYOUT;
    }
    static final VarHandle npx_flags$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("npx_flags"));
    public static VarHandle npx_flags$VH() {
        return so_np_extensions.npx_flags$VH;
    }
    public static int npx_flags$get(MemorySegment seg) {
        return (int)so_np_extensions.npx_flags$VH.get(seg);
    }
    public static void npx_flags$set(MemorySegment seg, int x) {
        so_np_extensions.npx_flags$VH.set(seg, x);
    }
    public static int npx_flags$get(MemorySegment seg, long index) {
        return (int)so_np_extensions.npx_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void npx_flags$set(MemorySegment seg, long index, int x) {
        so_np_extensions.npx_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle npx_mask$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("npx_mask"));
    public static VarHandle npx_mask$VH() {
        return so_np_extensions.npx_mask$VH;
    }
    public static int npx_mask$get(MemorySegment seg) {
        return (int)so_np_extensions.npx_mask$VH.get(seg);
    }
    public static void npx_mask$set(MemorySegment seg, int x) {
        so_np_extensions.npx_mask$VH.set(seg, x);
    }
    public static int npx_mask$get(MemorySegment seg, long index) {
        return (int)so_np_extensions.npx_mask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void npx_mask$set(MemorySegment seg, long index, int x) {
        so_np_extensions.npx_mask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


