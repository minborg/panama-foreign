// Generated by jextract

package jdk.internal.include.netinet;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;
import java.util.Objects;

import static java.lang.foreign.ValueLayout.PathElement;

public class sockaddr_in {

    static final StructLayout $struct$LAYOUT = Util.networkOrder(MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("sin_len"),
        Constants$root.C_CHAR$LAYOUT.withName("sin_family"),
        Constants$root.C_SHORT$LAYOUT.withName("sin_port"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("s_addr")
        ).withName("sin_addr"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("sin_zero")
    ).withName("sockaddr_in"));
    public static MemoryLayout $LAYOUT() {
        return sockaddr_in.$struct$LAYOUT;
    }
    static final VarHandle sin_len$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sin_len"));
    public static VarHandle sin_len$VH() {
        return sockaddr_in.sin_len$VH;
    }
    public static byte sin_len$get(MemorySegment seg) {
        return (byte)sockaddr_in.sin_len$VH.get(seg);
    }
    public static void sin_len$set( MemorySegment seg, byte x) {
        sockaddr_in.sin_len$VH.set(seg, x);
    }
    public static byte sin_len$get(MemorySegment seg, long index) {
        return (byte)sockaddr_in.sin_len$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sin_len$set(MemorySegment seg, long index, byte x) {
        sockaddr_in.sin_len$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sin_family$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sin_family"));
    public static VarHandle sin_family$VH() {
        return sockaddr_in.sin_family$VH;
    }
    public static byte sin_family$get(MemorySegment seg) {
        return (byte)sockaddr_in.sin_family$VH.get(seg);
    }
    public static void sin_family$set( MemorySegment seg, byte x) {
        sockaddr_in.sin_family$VH.set(seg, x);
    }
    public static byte sin_family$get(MemorySegment seg, long index) {
        return (byte)sockaddr_in.sin_family$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sin_family$set(MemorySegment seg, long index, byte x) {
        sockaddr_in.sin_family$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sin_port$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("sin_port"));
    public static VarHandle sin_port$VH() {
        return sockaddr_in.sin_port$VH;
    }
    public static short sin_port$get(MemorySegment seg) {
        return (short)sockaddr_in.sin_port$VH.get(seg);
    }
    public static void sin_port$set( MemorySegment seg, short x) {
        sockaddr_in.sin_port$VH.set(seg, x);
    }
    public static short sin_port$get(MemorySegment seg, long index) {
        return (short)sockaddr_in.sin_port$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sin_port$set(MemorySegment seg, long index, short x) {
        sockaddr_in.sin_port$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment sin_addr$slice(MemorySegment seg) {
        return seg.asSlice(4, 4);
    }
    public static MemorySegment sin_zero$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }

    public final class SocketaddrIn {

        public final MemorySegment segment;

        public SocketaddrIn(MemorySegment segment) {
            this.segment = Objects.requireNonNull(segment);
        }

        public void sinLen(byte sinLen) {
            sockaddr_in.sin_len$set(segment, sinLen);
        }

        public byte sinLen() {
            return sockaddr_in.sin_len$get(segment);
        }

        public void sinFamily(byte sinFamily) {
            sockaddr_in.sin_family$set(segment, sinFamily);
        }

        public byte sinFamily() {
            return sockaddr_in.sin_family$get(segment);
        }

        public void sinPort(short sinPort) {
            sockaddr_in.sin_port$set(segment, sinPort);
        }

        public short sinPort() {
            return sockaddr_in.sin_port$get(segment);
        }

    }


}


