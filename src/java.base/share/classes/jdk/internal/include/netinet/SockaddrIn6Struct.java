// Generated by jextract

package jdk.internal.include.netinet;

import jdk.internal.include.common.RuntimeHelper;
import jdk.internal.include.common.Util;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;

/**
 * {@snippet :
 * struct sockaddr_in6 {
 *     __uint8_t sin6_len;
 *     sa_family_t sin6_family;
 *     in_port_t sin6_port;
 *     __uint32_t sin6_flowinfo;
 *     struct in6_addr sin6_addr;
 *     __uint32_t sin6_scope_id;
 * };
 * }
 */
public final class SockaddrIn6Struct {

    // Suppresses default constructor, ensuring non-instantiability.
    private SockaddrIn6Struct() {
    }

    private static final MemoryLayout LAYOUT = Util.networkOrder(sockaddr_in6.$LAYOUT());

    public static MemoryLayout layout() {
        return LAYOUT;
    }

    static final VarHandle sin6_len$VH = layout().varHandle(MemoryLayout.PathElement.groupElement("sin6_len"));

    public static VarHandle sin6_len$VH() {
        return sin6_len$VH;
    }

    /**
     * Getter for field:
     * {@snippet :
     * __uint8_t sin6_len;
     * }
     */
    public static byte sin6_len$get(MemorySegment seg) {
        return (byte)sin6_len$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __uint8_t sin6_len;
     * }
     */
    public static void sin6_len$set(MemorySegment seg, byte x) {
        sin6_len$VH.set(seg, x);
    }
    public static byte sin6_len$get(MemorySegment seg, long index) {
        return (byte)sin6_len$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sin6_len$set(MemorySegment seg, long index, byte x) {
        sin6_len$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sin6_family$VH = layout().varHandle(MemoryLayout.PathElement.groupElement("sin6_family"));
    public static VarHandle sin6_family$VH() {
        return sin6_family$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * sa_family_t sin6_family;* }
     */
    public static byte sin6_family$get(MemorySegment seg) {
        return (byte)sin6_family$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * sa_family_t sin6_family;
     * }
     */
    public static void sin6_family$set(MemorySegment seg, byte x) {
        sin6_family$VH.set(seg, x);
    }

    public static byte sin6_family$get(MemorySegment seg, long index) {
        return (byte)sin6_family$VH.get(seg.asSlice(index*sizeof()));
    }

    public static void sin6_family$set(MemorySegment seg, long index, byte x) {
        sin6_family$VH.set(seg.asSlice(index*sizeof()), x);
    }

    static final VarHandle sin6_port$VH = layout().varHandle(MemoryLayout.PathElement.groupElement("sin6_port"));

    public static VarHandle sin6_port$VH() {
        return sin6_port$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * in_port_t sin6_port;
     * }
     */
    public static short sin6_port$get(MemorySegment seg) {
        return (short)sin6_port$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * in_port_t sin6_port;
     * }
     */
    public static void sin6_port$set(MemorySegment seg, short x) {
        sin6_port$VH.set(seg, x);
    }

    public static short sin6_port$get(MemorySegment seg, long index) {
        return (short)sin6_port$VH.get(seg.asSlice(index*sizeof()));
    }

    public static void sin6_port$set(MemorySegment seg, long index, short x) {
        sin6_port$VH.set(seg.asSlice(index*sizeof()), x);
    }

    static final VarHandle sin6_flowinfo$VH = layout().varHandle(MemoryLayout.PathElement.groupElement("sin6_flowinfo"));

    public static VarHandle sin6_flowinfo$VH() {
        return sin6_flowinfo$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __uint32_t sin6_flowinfo;
     * }
     */
    public static int sin6_flowinfo$get(MemorySegment seg) {
        return (int)sin6_flowinfo$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __uint32_t sin6_flowinfo;
     * }
     */
    public static void sin6_flowinfo$set(MemorySegment seg, int x) {
        sin6_flowinfo$VH.set(seg, x);
    }

    public static int sin6_flowinfo$get(MemorySegment seg, long index) {
        return (int)sin6_flowinfo$VH.get(seg.asSlice(index*sizeof()));
    }

    public static void sin6_flowinfo$set(MemorySegment seg, long index, int x) {
        sin6_flowinfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct in6_addr {
     *     union  __u6_addr;
     * };
     * }
     */
    public static final class in6_addr {

        // Suppresses default constructor, ensuring non-instantiability.
        private in6_addr() {}

        private static final MemoryLayout LAYOUT = Util.networkOrder(sockaddr_in6.in6_addr.$LAYOUT());

        public static MemoryLayout layout() {
            return LAYOUT;
        }

        /**
         * {@snippet :
         * union {
         *     __uint8_t __u6_addr8[16];
         *     __uint16_t __u6_addr16[8];
         *     __uint32_t __u6_addr32[4];
         * };
         * }
         */
        public static final class __u6_addr {

            // Suppresses default constructor, ensuring non-instantiability.
            private __u6_addr() {}

            private static final MemoryLayout LAYOUT = Util.networkOrder(sockaddr_in6.in6_addr.__u6_addr.$LAYOUT());

            public static MemoryLayout layout() {
                return LAYOUT;
            }

            public static MemorySegment __u6_addr8$slice(MemorySegment seg) {
                return seg.asSlice(0, 16);
            }

            public static MemorySegment __u6_addr16$slice(MemorySegment seg) {
                return seg.asSlice(0, 16);
            }

            public static MemorySegment __u6_addr32$slice(MemorySegment seg) {
                return seg.asSlice(0, 16);
            }

            public static long sizeof() {
                return layout().byteSize();
            }

            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, layout()));
            }

            public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) {
                return RuntimeHelper.asArray(addr, layout(), 1, scope); }
        }

        public static MemorySegment __u6_addr$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }

        public static long sizeof() {
            return layout().byteSize();
        }

        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, layout()));
        }

        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) {
            return RuntimeHelper.asArray(addr, layout(), 1, scope); }
    }

    public static MemorySegment sin6_addr$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }

    static final VarHandle sin6_scope_id$VH = layout().varHandle(MemoryLayout.PathElement.groupElement("sin6_scope_id"));

    public static VarHandle sin6_scope_id$VH() {
        return sin6_scope_id$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __uint32_t sin6_scope_id;
     * }
     */
    public static int sin6_scope_id$get(MemorySegment seg) {
        return (int)sin6_scope_id$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __uint32_t sin6_scope_id;
     * }
     */
    public static void sin6_scope_id$set(MemorySegment seg, int x) {
        sin6_scope_id$VH.set(seg, x);
    }

    public static int sin6_scope_id$get(MemorySegment seg, long index) {
        return (int)sin6_scope_id$VH.get(seg.asSlice(index*sizeof()));
    }

    public static void sin6_scope_id$set(MemorySegment seg, long index, int x) {
        sin6_scope_id$VH.set(seg.asSlice(index*sizeof()), x);
    }

    public static long sizeof() {
        return layout().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, layout()));
    }

    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) {
        return RuntimeHelper.asArray(addr, layout(), 1, scope);
    }
}

