// Generated by jextract

package jdk.internal.include.sys;

import java.lang.foreign.MemorySegment;
import java.lang.invoke.MethodHandle;

import static java.lang.foreign.ValueLayout.*;
public class socket_h  {

    public static final OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static final OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static final OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static final OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static final OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static final OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static int __DARWIN_ONLY_64_BIT_INO_T() {
        return (int)0L;
    }
    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return (int)1L;
    }
    public static int __DARWIN_ONLY_VERS_1050() {
        return (int)0L;
    }
    public static int __DARWIN_UNIX03() {
        return (int)1L;
    }
    public static int __DARWIN_64_BIT_INO_T() {
        return (int)1L;
    }
    public static int __DARWIN_VERS_1050() {
        return (int)1L;
    }
    public static int __DARWIN_NON_CANCELABLE() {
        return (int)0L;
    }
    public static int __STDC_WANT_LIB_EXT1__() {
        return (int)1L;
    }
    public static int __DARWIN_NO_LONG_LONG() {
        return (int)0L;
    }
    public static int _DARWIN_FEATURE_64_BIT_INODE() {
        return (int)1L;
    }
    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return (int)1L;
    }
    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return (int)3L;
    }
    public static int __has_ptrcheck() {
        return (int)0L;
    }
    public static int __PTHREAD_SIZE__() {
        return (int)8176L;
    }
    public static int __PTHREAD_ATTR_SIZE__() {
        return (int)56L;
    }
    public static int __PTHREAD_MUTEXATTR_SIZE__() {
        return (int)8L;
    }
    public static int __PTHREAD_MUTEX_SIZE__() {
        return (int)56L;
    }
    public static int __PTHREAD_CONDATTR_SIZE__() {
        return (int)8L;
    }
    public static int __PTHREAD_COND_SIZE__() {
        return (int)40L;
    }
    public static int __PTHREAD_ONCE_SIZE__() {
        return (int)8L;
    }
    public static int __PTHREAD_RWLOCK_SIZE__() {
        return (int)192L;
    }
    public static int __PTHREAD_RWLOCKATTR_SIZE__() {
        return (int)16L;
    }
    public static int _QUAD_HIGHWORD() {
        return (int)1L;
    }
    public static int _QUAD_LOWWORD() {
        return (int)0L;
    }
    public static int __DARWIN_LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int __DARWIN_BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int __DARWIN_PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int __API_TO_BE_DEPRECATED() {
        return (int)100000L;
    }
    public static int __MAC_10_0() {
        return (int)1000L;
    }
    public static int __MAC_10_1() {
        return (int)1010L;
    }
    public static int __MAC_10_2() {
        return (int)1020L;
    }
    public static int __MAC_10_3() {
        return (int)1030L;
    }
    public static int __MAC_10_4() {
        return (int)1040L;
    }
    public static int __MAC_10_5() {
        return (int)1050L;
    }
    public static int __MAC_10_6() {
        return (int)1060L;
    }
    public static int __MAC_10_7() {
        return (int)1070L;
    }
    public static int __MAC_10_8() {
        return (int)1080L;
    }
    public static int __MAC_10_9() {
        return (int)1090L;
    }
    public static int __MAC_10_10() {
        return (int)101000L;
    }
    public static int __MAC_10_10_2() {
        return (int)101002L;
    }
    public static int __MAC_10_10_3() {
        return (int)101003L;
    }
    public static int __MAC_10_11() {
        return (int)101100L;
    }
    public static int __MAC_10_11_2() {
        return (int)101102L;
    }
    public static int __MAC_10_11_3() {
        return (int)101103L;
    }
    public static int __MAC_10_11_4() {
        return (int)101104L;
    }
    public static int __MAC_10_12() {
        return (int)101200L;
    }
    public static int __MAC_10_12_1() {
        return (int)101201L;
    }
    public static int __MAC_10_12_2() {
        return (int)101202L;
    }
    public static int __MAC_10_12_4() {
        return (int)101204L;
    }
    public static int __MAC_10_13() {
        return (int)101300L;
    }
    public static int __MAC_10_13_1() {
        return (int)101301L;
    }
    public static int __MAC_10_13_2() {
        return (int)101302L;
    }
    public static int __MAC_10_13_4() {
        return (int)101304L;
    }
    public static int __MAC_10_14() {
        return (int)101400L;
    }
    public static int __MAC_10_14_1() {
        return (int)101401L;
    }
    public static int __MAC_10_14_4() {
        return (int)101404L;
    }
    public static int __MAC_10_14_6() {
        return (int)101406L;
    }
    public static int __MAC_10_15() {
        return (int)101500L;
    }
    public static int __MAC_10_15_1() {
        return (int)101501L;
    }
    public static int __MAC_10_15_4() {
        return (int)101504L;
    }
    public static int __MAC_10_16() {
        return (int)101600L;
    }
    public static int __MAC_11_0() {
        return (int)110000L;
    }
    public static int __MAC_11_1() {
        return (int)110100L;
    }
    public static int __MAC_11_3() {
        return (int)110300L;
    }
    public static int __MAC_11_4() {
        return (int)110400L;
    }
    public static int __MAC_11_5() {
        return (int)110500L;
    }
    public static int __MAC_11_6() {
        return (int)110600L;
    }
    public static int __MAC_12_0() {
        return (int)120000L;
    }
    public static int __MAC_12_1() {
        return (int)120100L;
    }
    public static int __MAC_12_2() {
        return (int)120200L;
    }
    public static int __MAC_12_3() {
        return (int)120300L;
    }
    public static int __IPHONE_2_0() {
        return (int)20000L;
    }
    public static int __IPHONE_2_1() {
        return (int)20100L;
    }
    public static int __IPHONE_2_2() {
        return (int)20200L;
    }
    public static int __IPHONE_3_0() {
        return (int)30000L;
    }
    public static int __IPHONE_3_1() {
        return (int)30100L;
    }
    public static int __IPHONE_3_2() {
        return (int)30200L;
    }
    public static int __IPHONE_4_0() {
        return (int)40000L;
    }
    public static int __IPHONE_4_1() {
        return (int)40100L;
    }
    public static int __IPHONE_4_2() {
        return (int)40200L;
    }
    public static int __IPHONE_4_3() {
        return (int)40300L;
    }
    public static int __IPHONE_5_0() {
        return (int)50000L;
    }
    public static int __IPHONE_5_1() {
        return (int)50100L;
    }
    public static int __IPHONE_6_0() {
        return (int)60000L;
    }
    public static int __IPHONE_6_1() {
        return (int)60100L;
    }
    public static int __IPHONE_7_0() {
        return (int)70000L;
    }
    public static int __IPHONE_7_1() {
        return (int)70100L;
    }
    public static int __IPHONE_8_0() {
        return (int)80000L;
    }
    public static int __IPHONE_8_1() {
        return (int)80100L;
    }
    public static int __IPHONE_8_2() {
        return (int)80200L;
    }
    public static int __IPHONE_8_3() {
        return (int)80300L;
    }
    public static int __IPHONE_8_4() {
        return (int)80400L;
    }
    public static int __IPHONE_9_0() {
        return (int)90000L;
    }
    public static int __IPHONE_9_1() {
        return (int)90100L;
    }
    public static int __IPHONE_9_2() {
        return (int)90200L;
    }
    public static int __IPHONE_9_3() {
        return (int)90300L;
    }
    public static int __IPHONE_10_0() {
        return (int)100000L;
    }
    public static int __IPHONE_10_1() {
        return (int)100100L;
    }
    public static int __IPHONE_10_2() {
        return (int)100200L;
    }
    public static int __IPHONE_10_3() {
        return (int)100300L;
    }
    public static int __IPHONE_11_0() {
        return (int)110000L;
    }
    public static int __IPHONE_11_1() {
        return (int)110100L;
    }
    public static int __IPHONE_11_2() {
        return (int)110200L;
    }
    public static int __IPHONE_11_3() {
        return (int)110300L;
    }
    public static int __IPHONE_11_4() {
        return (int)110400L;
    }
    public static int __IPHONE_12_0() {
        return (int)120000L;
    }
    public static int __IPHONE_12_1() {
        return (int)120100L;
    }
    public static int __IPHONE_12_2() {
        return (int)120200L;
    }
    public static int __IPHONE_12_3() {
        return (int)120300L;
    }
    public static int __IPHONE_12_4() {
        return (int)120400L;
    }
    public static int __IPHONE_13_0() {
        return (int)130000L;
    }
    public static int __IPHONE_13_1() {
        return (int)130100L;
    }
    public static int __IPHONE_13_2() {
        return (int)130200L;
    }
    public static int __IPHONE_13_3() {
        return (int)130300L;
    }
    public static int __IPHONE_13_4() {
        return (int)130400L;
    }
    public static int __IPHONE_13_5() {
        return (int)130500L;
    }
    public static int __IPHONE_13_6() {
        return (int)130600L;
    }
    public static int __IPHONE_13_7() {
        return (int)130700L;
    }
    public static int __IPHONE_14_0() {
        return (int)140000L;
    }
    public static int __IPHONE_14_1() {
        return (int)140100L;
    }
    public static int __IPHONE_14_2() {
        return (int)140200L;
    }
    public static int __IPHONE_14_3() {
        return (int)140300L;
    }
    public static int __IPHONE_14_5() {
        return (int)140500L;
    }
    public static int __IPHONE_14_6() {
        return (int)140600L;
    }
    public static int __IPHONE_14_7() {
        return (int)140700L;
    }
    public static int __IPHONE_14_8() {
        return (int)140800L;
    }
    public static int __IPHONE_15_0() {
        return (int)150000L;
    }
    public static int __IPHONE_15_1() {
        return (int)150100L;
    }
    public static int __IPHONE_15_2() {
        return (int)150200L;
    }
    public static int __IPHONE_15_3() {
        return (int)150300L;
    }
    public static int __IPHONE_15_4() {
        return (int)150400L;
    }
    public static int __TVOS_9_0() {
        return (int)90000L;
    }
    public static int __TVOS_9_1() {
        return (int)90100L;
    }
    public static int __TVOS_9_2() {
        return (int)90200L;
    }
    public static int __TVOS_10_0() {
        return (int)100000L;
    }
    public static int __TVOS_10_0_1() {
        return (int)100001L;
    }
    public static int __TVOS_10_1() {
        return (int)100100L;
    }
    public static int __TVOS_10_2() {
        return (int)100200L;
    }
    public static int __TVOS_11_0() {
        return (int)110000L;
    }
    public static int __TVOS_11_1() {
        return (int)110100L;
    }
    public static int __TVOS_11_2() {
        return (int)110200L;
    }
    public static int __TVOS_11_3() {
        return (int)110300L;
    }
    public static int __TVOS_11_4() {
        return (int)110400L;
    }
    public static int __TVOS_12_0() {
        return (int)120000L;
    }
    public static int __TVOS_12_1() {
        return (int)120100L;
    }
    public static int __TVOS_12_2() {
        return (int)120200L;
    }
    public static int __TVOS_12_3() {
        return (int)120300L;
    }
    public static int __TVOS_12_4() {
        return (int)120400L;
    }
    public static int __TVOS_13_0() {
        return (int)130000L;
    }
    public static int __TVOS_13_2() {
        return (int)130200L;
    }
    public static int __TVOS_13_3() {
        return (int)130300L;
    }
    public static int __TVOS_13_4() {
        return (int)130400L;
    }
    public static int __TVOS_14_0() {
        return (int)140000L;
    }
    public static int __TVOS_14_1() {
        return (int)140100L;
    }
    public static int __TVOS_14_2() {
        return (int)140200L;
    }
    public static int __TVOS_14_3() {
        return (int)140300L;
    }
    public static int __TVOS_14_5() {
        return (int)140500L;
    }
    public static int __TVOS_14_6() {
        return (int)140600L;
    }
    public static int __TVOS_14_7() {
        return (int)140700L;
    }
    public static int __TVOS_15_0() {
        return (int)150000L;
    }
    public static int __TVOS_15_1() {
        return (int)150100L;
    }
    public static int __TVOS_15_2() {
        return (int)150200L;
    }
    public static int __TVOS_15_3() {
        return (int)150300L;
    }
    public static int __TVOS_15_4() {
        return (int)150400L;
    }
    public static int __WATCHOS_1_0() {
        return (int)10000L;
    }
    public static int __WATCHOS_2_0() {
        return (int)20000L;
    }
    public static int __WATCHOS_2_1() {
        return (int)20100L;
    }
    public static int __WATCHOS_2_2() {
        return (int)20200L;
    }
    public static int __WATCHOS_3_0() {
        return (int)30000L;
    }
    public static int __WATCHOS_3_1() {
        return (int)30100L;
    }
    public static int __WATCHOS_3_1_1() {
        return (int)30101L;
    }
    public static int __WATCHOS_3_2() {
        return (int)30200L;
    }
    public static int __WATCHOS_4_0() {
        return (int)40000L;
    }
    public static int __WATCHOS_4_1() {
        return (int)40100L;
    }
    public static int __WATCHOS_4_2() {
        return (int)40200L;
    }
    public static int __WATCHOS_4_3() {
        return (int)40300L;
    }
    public static int __WATCHOS_5_0() {
        return (int)50000L;
    }
    public static int __WATCHOS_5_1() {
        return (int)50100L;
    }
    public static int __WATCHOS_5_2() {
        return (int)50200L;
    }
    public static int __WATCHOS_5_3() {
        return (int)50300L;
    }
    public static int __WATCHOS_6_0() {
        return (int)60000L;
    }
    public static int __WATCHOS_6_1() {
        return (int)60100L;
    }
    public static int __WATCHOS_6_2() {
        return (int)60200L;
    }
    public static int __WATCHOS_7_0() {
        return (int)70000L;
    }
    public static int __WATCHOS_7_1() {
        return (int)70100L;
    }
    public static int __WATCHOS_7_2() {
        return (int)70200L;
    }
    public static int __WATCHOS_7_3() {
        return (int)70300L;
    }
    public static int __WATCHOS_7_4() {
        return (int)70400L;
    }
    public static int __WATCHOS_7_5() {
        return (int)70500L;
    }
    public static int __WATCHOS_7_6() {
        return (int)70600L;
    }
    public static int __WATCHOS_8_0() {
        return (int)80000L;
    }
    public static int __WATCHOS_8_1() {
        return (int)80100L;
    }
    public static int __WATCHOS_8_3() {
        return (int)80300L;
    }
    public static int __WATCHOS_8_4() {
        return (int)80400L;
    }
    public static int __WATCHOS_8_5() {
        return (int)80500L;
    }
    public static int MAC_OS_X_VERSION_10_0() {
        return (int)1000L;
    }
    public static int MAC_OS_X_VERSION_10_1() {
        return (int)1010L;
    }
    public static int MAC_OS_X_VERSION_10_2() {
        return (int)1020L;
    }
    public static int MAC_OS_X_VERSION_10_3() {
        return (int)1030L;
    }
    public static int MAC_OS_X_VERSION_10_4() {
        return (int)1040L;
    }
    public static int MAC_OS_X_VERSION_10_5() {
        return (int)1050L;
    }
    public static int MAC_OS_X_VERSION_10_6() {
        return (int)1060L;
    }
    public static int MAC_OS_X_VERSION_10_7() {
        return (int)1070L;
    }
    public static int MAC_OS_X_VERSION_10_8() {
        return (int)1080L;
    }
    public static int MAC_OS_X_VERSION_10_9() {
        return (int)1090L;
    }
    public static int MAC_OS_X_VERSION_10_10() {
        return (int)101000L;
    }
    public static int MAC_OS_X_VERSION_10_10_2() {
        return (int)101002L;
    }
    public static int MAC_OS_X_VERSION_10_10_3() {
        return (int)101003L;
    }
    public static int MAC_OS_X_VERSION_10_11() {
        return (int)101100L;
    }
    public static int MAC_OS_X_VERSION_10_11_2() {
        return (int)101102L;
    }
    public static int MAC_OS_X_VERSION_10_11_3() {
        return (int)101103L;
    }
    public static int MAC_OS_X_VERSION_10_11_4() {
        return (int)101104L;
    }
    public static int MAC_OS_X_VERSION_10_12() {
        return (int)101200L;
    }
    public static int MAC_OS_X_VERSION_10_12_1() {
        return (int)101201L;
    }
    public static int MAC_OS_X_VERSION_10_12_2() {
        return (int)101202L;
    }
    public static int MAC_OS_X_VERSION_10_12_4() {
        return (int)101204L;
    }
    public static int MAC_OS_X_VERSION_10_13() {
        return (int)101300L;
    }
    public static int MAC_OS_X_VERSION_10_13_1() {
        return (int)101301L;
    }
    public static int MAC_OS_X_VERSION_10_13_2() {
        return (int)101302L;
    }
    public static int MAC_OS_X_VERSION_10_13_4() {
        return (int)101304L;
    }
    public static int MAC_OS_X_VERSION_10_14() {
        return (int)101400L;
    }
    public static int MAC_OS_X_VERSION_10_14_1() {
        return (int)101401L;
    }
    public static int MAC_OS_X_VERSION_10_14_4() {
        return (int)101404L;
    }
    public static int MAC_OS_X_VERSION_10_14_6() {
        return (int)101406L;
    }
    public static int MAC_OS_X_VERSION_10_15() {
        return (int)101500L;
    }
    public static int MAC_OS_X_VERSION_10_15_1() {
        return (int)101501L;
    }
    public static int MAC_OS_X_VERSION_10_16() {
        return (int)101600L;
    }
    public static int MAC_OS_VERSION_11_0() {
        return (int)110000L;
    }
    public static int MAC_OS_VERSION_12_0() {
        return (int)120000L;
    }
    public static int __DRIVERKIT_19_0() {
        return (int)190000L;
    }
    public static int __DRIVERKIT_20_0() {
        return (int)200000L;
    }
    public static int __DRIVERKIT_21_0() {
        return (int)210000L;
    }
    public static int __ENABLE_LEGACY_MAC_AVAILABILITY() {
        return (int)1L;
    }
    public static int __DARWIN_FD_SETSIZE() {
        return (int)1024L;
    }
    public static int __DARWIN_NBBY() {
        return (int)8L;
    }
    public static int KEV_INET_SUBCLASS() {
        return (int)1L;
    }
    public static int KEV_INET_NEW_ADDR() {
        return (int)1L;
    }
    public static int KEV_INET_CHANGED_ADDR() {
        return (int)2L;
    }
    public static int KEV_INET_ADDR_DELETED() {
        return (int)3L;
    }
    public static int KEV_INET_SIFDSTADDR() {
        return (int)4L;
    }
    public static int KEV_INET_SIFBRDADDR() {
        return (int)5L;
    }
    public static int KEV_INET_SIFNETMASK() {
        return (int)6L;
    }
    public static int KEV_INET_ARPCOLLISION() {
        return (int)7L;
    }
    public static int KEV_INET_PORTINUSE() {
        return (int)8L;
    }
    public static int KEV_INET_ARPRTRFAILURE() {
        return (int)9L;
    }
    public static int KEV_INET_ARPRTRALIVE() {
        return (int)10L;
    }
    public static int KEV_DL_SUBCLASS() {
        return (int)2L;
    }
    public static int KEV_DL_SIFFLAGS() {
        return (int)1L;
    }
    public static int KEV_DL_SIFMETRICS() {
        return (int)2L;
    }
    public static int KEV_DL_SIFMTU() {
        return (int)3L;
    }
    public static int KEV_DL_SIFPHYS() {
        return (int)4L;
    }
    public static int KEV_DL_SIFMEDIA() {
        return (int)5L;
    }
    public static int KEV_DL_SIFGENERIC() {
        return (int)6L;
    }
    public static int KEV_DL_ADDMULTI() {
        return (int)7L;
    }
    public static int KEV_DL_DELMULTI() {
        return (int)8L;
    }
    public static int KEV_DL_IF_ATTACHED() {
        return (int)9L;
    }
    public static int KEV_DL_IF_DETACHING() {
        return (int)10L;
    }
    public static int KEV_DL_IF_DETACHED() {
        return (int)11L;
    }
    public static int KEV_DL_LINK_OFF() {
        return (int)12L;
    }
    public static int KEV_DL_LINK_ON() {
        return (int)13L;
    }
    public static int KEV_DL_PROTO_ATTACHED() {
        return (int)14L;
    }
    public static int KEV_DL_PROTO_DETACHED() {
        return (int)15L;
    }
    public static int KEV_DL_LINK_ADDRESS_CHANGED() {
        return (int)16L;
    }
    public static int KEV_DL_WAKEFLAGS_CHANGED() {
        return (int)17L;
    }
    public static int KEV_DL_IF_IDLE_ROUTE_REFCNT() {
        return (int)18L;
    }
    public static int KEV_DL_IFCAP_CHANGED() {
        return (int)19L;
    }
    public static int KEV_DL_LINK_QUALITY_METRIC_CHANGED() {
        return (int)20L;
    }
    public static int KEV_DL_NODE_PRESENCE() {
        return (int)21L;
    }
    public static int KEV_DL_NODE_ABSENCE() {
        return (int)22L;
    }
    public static int KEV_DL_PRIMARY_ELECTED() {
        return (int)23L;
    }
    public static int KEV_DL_ISSUES() {
        return (int)24L;
    }
    public static int KEV_DL_IFDELEGATE_CHANGED() {
        return (int)25L;
    }
    public static int KEV_DL_AWDL_RESTRICTED() {
        return (int)26L;
    }
    public static int KEV_DL_AWDL_UNRESTRICTED() {
        return (int)27L;
    }
    public static int KEV_DL_RRC_STATE_CHANGED() {
        return (int)28L;
    }
    public static int KEV_DL_QOS_MODE_CHANGED() {
        return (int)29L;
    }
    public static int KEV_DL_LOW_POWER_MODE_CHANGED() {
        return (int)30L;
    }
    public static int KEV_INET6_SUBCLASS() {
        return (int)6L;
    }
    public static int KEV_INET6_NEW_USER_ADDR() {
        return (int)1L;
    }
    public static int KEV_INET6_CHANGED_ADDR() {
        return (int)2L;
    }
    public static int KEV_INET6_ADDR_DELETED() {
        return (int)3L;
    }
    public static int KEV_INET6_NEW_LL_ADDR() {
        return (int)4L;
    }
    public static int KEV_INET6_NEW_RTADV_ADDR() {
        return (int)5L;
    }
    public static int KEV_INET6_DEFROUTER() {
        return (int)6L;
    }
    public static int KEV_INET6_REQUEST_NAT64_PREFIX() {
        return (int)7L;
    }
    public static int SOCK_STREAM() {
        return (int)1L;
    }
    public static int SOCK_DGRAM() {
        return (int)2L;
    }
    public static int SOCK_RAW() {
        return (int)3L;
    }
    public static int SOCK_RDM() {
        return (int)4L;
    }
    public static int SOCK_SEQPACKET() {
        return (int)5L;
    }
    public static int SO_DEBUG() {
        return (int)1L;
    }
    public static int SO_ACCEPTCONN() {
        return (int)2L;
    }
    public static int SO_REUSEADDR() {
        return (int)4L;
    }
    public static int SO_KEEPALIVE() {
        return (int)8L;
    }
    public static int SO_DONTROUTE() {
        return (int)16L;
    }
    public static int SO_BROADCAST() {
        return (int)32L;
    }
    public static int SO_USELOOPBACK() {
        return (int)64L;
    }
    public static int SO_LINGER() {
        return (int)128L;
    }
    public static int SO_OOBINLINE() {
        return (int)256L;
    }
    public static int SO_REUSEPORT() {
        return (int)512L;
    }
    public static int SO_TIMESTAMP() {
        return (int)1024L;
    }
    public static int SO_TIMESTAMP_MONOTONIC() {
        return (int)2048L;
    }
    public static int SO_DONTTRUNC() {
        return (int)8192L;
    }
    public static int SO_WANTMORE() {
        return (int)16384L;
    }
    public static int SO_WANTOOBFLAG() {
        return (int)32768L;
    }
    public static int SO_SNDBUF() {
        return (int)4097L;
    }
    public static int SO_RCVBUF() {
        return (int)4098L;
    }
    public static int SO_SNDLOWAT() {
        return (int)4099L;
    }
    public static int SO_RCVLOWAT() {
        return (int)4100L;
    }
    public static int SO_SNDTIMEO() {
        return (int)4101L;
    }
    public static int SO_RCVTIMEO() {
        return (int)4102L;
    }
    public static int SO_ERROR() {
        return (int)4103L;
    }
    public static int SO_TYPE() {
        return (int)4104L;
    }
    public static int SO_LABEL() {
        return (int)4112L;
    }
    public static int SO_PEERLABEL() {
        return (int)4113L;
    }
    public static int SO_NREAD() {
        return (int)4128L;
    }
    public static int SO_NKE() {
        return (int)4129L;
    }
    public static int SO_NOSIGPIPE() {
        return (int)4130L;
    }
    public static int SO_NOADDRERR() {
        return (int)4131L;
    }
    public static int SO_NWRITE() {
        return (int)4132L;
    }
    public static int SO_REUSESHAREUID() {
        return (int)4133L;
    }
    public static int SO_NOTIFYCONFLICT() {
        return (int)4134L;
    }
    public static int SO_UPCALLCLOSEWAIT() {
        return (int)4135L;
    }
    public static int SO_LINGER_SEC() {
        return (int)4224L;
    }
    public static int SO_RANDOMPORT() {
        return (int)4226L;
    }
    public static int SO_NP_EXTENSIONS() {
        return (int)4227L;
    }
    public static int SO_NUMRCVPKT() {
        return (int)4370L;
    }
    public static int SO_NET_SERVICE_TYPE() {
        return (int)4374L;
    }
    public static int SO_NETSVC_MARKING_LEVEL() {
        return (int)4377L;
    }
    public static int NET_SERVICE_TYPE_BE() {
        return (int)0L;
    }
    public static int NET_SERVICE_TYPE_BK() {
        return (int)1L;
    }
    public static int NET_SERVICE_TYPE_SIG() {
        return (int)2L;
    }
    public static int NET_SERVICE_TYPE_VI() {
        return (int)3L;
    }
    public static int NET_SERVICE_TYPE_VO() {
        return (int)4L;
    }
    public static int NET_SERVICE_TYPE_RV() {
        return (int)5L;
    }
    public static int NET_SERVICE_TYPE_AV() {
        return (int)6L;
    }
    public static int NET_SERVICE_TYPE_OAM() {
        return (int)7L;
    }
    public static int NET_SERVICE_TYPE_RD() {
        return (int)8L;
    }
    public static int NETSVC_MRKNG_UNKNOWN() {
        return (int)0L;
    }
    public static int NETSVC_MRKNG_LVL_L2() {
        return (int)1L;
    }
    public static int NETSVC_MRKNG_LVL_L3L2_ALL() {
        return (int)2L;
    }
    public static int NETSVC_MRKNG_LVL_L3L2_BK() {
        return (int)3L;
    }
    public static int SAE_ASSOCID_ANY() {
        return (int)0L;
    }
    public static int SAE_CONNID_ANY() {
        return (int)0L;
    }
    public static int CONNECT_RESUME_ON_READ_WRITE() {
        return (int)1L;
    }
    public static int CONNECT_DATA_IDEMPOTENT() {
        return (int)2L;
    }
    public static int CONNECT_DATA_AUTHENTICATED() {
        return (int)4L;
    }
    public static int SONPX_SETOPTSHUT() {
        return (int)1L;
    }
    public static int SOL_SOCKET() {
        return (int)65535L;
    }
    public static int AF_UNSPEC() {
        return (int)0L;
    }
    public static int AF_UNIX() {
        return (int)1L;
    }
    public static int AF_INET() {
        return (int)2L;
    }
    public static int AF_IMPLINK() {
        return (int)3L;
    }
    public static int AF_PUP() {
        return (int)4L;
    }
    public static int AF_CHAOS() {
        return (int)5L;
    }
    public static int AF_NS() {
        return (int)6L;
    }
    public static int AF_ISO() {
        return (int)7L;
    }
    public static int AF_ECMA() {
        return (int)8L;
    }
    public static int AF_DATAKIT() {
        return (int)9L;
    }
    public static int AF_CCITT() {
        return (int)10L;
    }
    public static int AF_SNA() {
        return (int)11L;
    }
    public static int AF_DECnet() {
        return (int)12L;
    }
    public static int AF_DLI() {
        return (int)13L;
    }
    public static int AF_LAT() {
        return (int)14L;
    }
    public static int AF_HYLINK() {
        return (int)15L;
    }
    public static int AF_APPLETALK() {
        return (int)16L;
    }
    public static int AF_ROUTE() {
        return (int)17L;
    }
    public static int AF_LINK() {
        return (int)18L;
    }
    public static int pseudo_AF_XTP() {
        return (int)19L;
    }
    public static int AF_COIP() {
        return (int)20L;
    }
    public static int AF_CNT() {
        return (int)21L;
    }
    public static int pseudo_AF_RTIP() {
        return (int)22L;
    }
    public static int AF_IPX() {
        return (int)23L;
    }
    public static int AF_SIP() {
        return (int)24L;
    }
    public static int pseudo_AF_PIP() {
        return (int)25L;
    }
    public static int AF_NDRV() {
        return (int)27L;
    }
    public static int AF_ISDN() {
        return (int)28L;
    }
    public static int pseudo_AF_KEY() {
        return (int)29L;
    }
    public static int AF_INET6() {
        return (int)30L;
    }
    public static int AF_NATM() {
        return (int)31L;
    }
    public static int AF_SYSTEM() {
        return (int)32L;
    }
    public static int AF_NETBIOS() {
        return (int)33L;
    }
    public static int AF_PPP() {
        return (int)34L;
    }
    public static int pseudo_AF_HDRCMPLT() {
        return (int)35L;
    }
    public static int AF_RESERVED_36() {
        return (int)36L;
    }
    public static int AF_IEEE80211() {
        return (int)37L;
    }
    public static int AF_UTUN() {
        return (int)38L;
    }
    public static int AF_VSOCK() {
        return (int)40L;
    }
    public static int AF_MAX() {
        return (int)41L;
    }
    public static int SOCK_MAXADDRLEN() {
        return (int)255L;
    }
    public static int _SS_MAXSIZE() {
        return (int)128L;
    }
    public static int NET_RT_DUMP() {
        return (int)1L;
    }
    public static int NET_RT_FLAGS() {
        return (int)2L;
    }
    public static int NET_RT_IFLIST() {
        return (int)3L;
    }
    public static int NET_RT_STAT() {
        return (int)4L;
    }
    public static int NET_RT_TRASH() {
        return (int)5L;
    }
    public static int NET_RT_IFLIST2() {
        return (int)6L;
    }
    public static int NET_RT_DUMP2() {
        return (int)7L;
    }
    public static int NET_RT_FLAGS_PRIV() {
        return (int)10L;
    }
    public static int NET_RT_MAXID() {
        return (int)11L;
    }
    public static int SOMAXCONN() {
        return (int)128L;
    }
    public static int MSG_OOB() {
        return (int)1L;
    }
    public static int MSG_PEEK() {
        return (int)2L;
    }
    public static int MSG_DONTROUTE() {
        return (int)4L;
    }
    public static int MSG_EOR() {
        return (int)8L;
    }
    public static int MSG_TRUNC() {
        return (int)16L;
    }
    public static int MSG_CTRUNC() {
        return (int)32L;
    }
    public static int MSG_WAITALL() {
        return (int)64L;
    }
    public static int MSG_DONTWAIT() {
        return (int)128L;
    }
    public static int MSG_EOF() {
        return (int)256L;
    }
    public static int MSG_WAITSTREAM() {
        return (int)512L;
    }
    public static int MSG_FLUSH() {
        return (int)1024L;
    }
    public static int MSG_HOLD() {
        return (int)2048L;
    }
    public static int MSG_SEND() {
        return (int)4096L;
    }
    public static int MSG_HAVEMORE() {
        return (int)8192L;
    }
    public static int MSG_RCVMORE() {
        return (int)16384L;
    }
    public static int MSG_NEEDSA() {
        return (int)65536L;
    }
    public static int MSG_NOSIGNAL() {
        return (int)524288L;
    }
    public static int SCM_RIGHTS() {
        return (int)1L;
    }
    public static int SCM_TIMESTAMP() {
        return (int)2L;
    }
    public static int SCM_CREDS() {
        return (int)3L;
    }
    public static int SCM_TIMESTAMP_MONOTONIC() {
        return (int)4L;
    }
    public static int SHUT_RD() {
        return (int)0L;
    }
    public static int SHUT_WR() {
        return (int)1L;
    }
    public static int SHUT_RDWR() {
        return (int)2L;
    }
    public static final OfByte __int8_t = Constants$root.C_CHAR$LAYOUT;
    public static final OfByte __uint8_t = Constants$root.C_CHAR$LAYOUT;
    public static final OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    public static final OfShort __uint16_t = Constants$root.C_SHORT$LAYOUT;
    public static final OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    public static final OfInt __uint32_t = Constants$root.C_INT$LAYOUT;
    public static final OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong __uint64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong __darwin_intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfInt __darwin_natural_t = Constants$root.C_INT$LAYOUT;
    public static final OfInt __darwin_ct_rune_t = Constants$root.C_INT$LAYOUT;
    public static final OfLong __darwin_ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong __darwin_size_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfInt __darwin_wchar_t = Constants$root.C_INT$LAYOUT;
    public static final OfInt __darwin_rune_t = Constants$root.C_INT$LAYOUT;
    public static final OfInt __darwin_wint_t = Constants$root.C_INT$LAYOUT;
    public static final OfLong __darwin_clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfInt __darwin_socklen_t = Constants$root.C_INT$LAYOUT;
    public static final OfLong __darwin_ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong __darwin_time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfByte int8_t = Constants$root.C_CHAR$LAYOUT;
    public static final OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    public static final OfInt int32_t = Constants$root.C_INT$LAYOUT;
    public static final OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfByte u_int8_t = Constants$root.C_CHAR$LAYOUT;
    public static final OfShort u_int16_t = Constants$root.C_SHORT$LAYOUT;
    public static final OfInt u_int32_t = Constants$root.C_INT$LAYOUT;
    public static final OfLong u_int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong uintptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong user_addr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong user_size_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong user_ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong user_long_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong user_ulong_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong user_time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong user_off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong syscall_arg_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong __darwin_blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfInt __darwin_blksize_t = Constants$root.C_INT$LAYOUT;
    public static final OfInt __darwin_dev_t = Constants$root.C_INT$LAYOUT;
    public static final OfInt __darwin_fsblkcnt_t = Constants$root.C_INT$LAYOUT;
    public static final OfInt __darwin_fsfilcnt_t = Constants$root.C_INT$LAYOUT;
    public static final OfInt __darwin_gid_t = Constants$root.C_INT$LAYOUT;
    public static final OfInt __darwin_id_t = Constants$root.C_INT$LAYOUT;
    public static final OfLong __darwin_ino64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong __darwin_ino_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfInt __darwin_mach_port_name_t = Constants$root.C_INT$LAYOUT;
    public static final OfInt __darwin_mach_port_t = Constants$root.C_INT$LAYOUT;
    public static final OfShort __darwin_mode_t = Constants$root.C_SHORT$LAYOUT;
    public static final OfLong __darwin_off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfInt __darwin_pid_t = Constants$root.C_INT$LAYOUT;
    public static final OfInt __darwin_sigset_t = Constants$root.C_INT$LAYOUT;
    public static final OfInt __darwin_suseconds_t = Constants$root.C_INT$LAYOUT;
    public static final OfInt __darwin_uid_t = Constants$root.C_INT$LAYOUT;
    public static final OfInt __darwin_useconds_t = Constants$root.C_INT$LAYOUT;
    public static final OfLong __darwin_pthread_key_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfAddress __darwin_pthread_t = Constants$root.C_POINTER$LAYOUT;
    public static final OfByte u_char = Constants$root.C_CHAR$LAYOUT;
    public static final OfShort u_short = Constants$root.C_SHORT$LAYOUT;
    public static final OfInt u_int = Constants$root.C_INT$LAYOUT;
    public static final OfLong u_long = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfShort ushort = Constants$root.C_SHORT$LAYOUT;
    public static final OfInt uint = Constants$root.C_INT$LAYOUT;
    public static final OfLong u_quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfAddress qaddr_t = Constants$root.C_POINTER$LAYOUT;
    public static final OfAddress caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static final OfInt daddr_t = Constants$root.C_INT$LAYOUT;
    public static final OfInt dev_t = Constants$root.C_INT$LAYOUT;
    public static final OfInt fixpt_t = Constants$root.C_INT$LAYOUT;
    public static final OfLong blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfInt blksize_t = Constants$root.C_INT$LAYOUT;
    public static final OfInt gid_t = Constants$root.C_INT$LAYOUT;
    public static final OfInt in_addr_t = Constants$root.C_INT$LAYOUT;
    public static final OfShort in_port_t = Constants$root.C_SHORT$LAYOUT;
    public static final OfLong ino_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong ino64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfInt key_t = Constants$root.C_INT$LAYOUT;
    public static final OfShort mode_t = Constants$root.C_SHORT$LAYOUT;
    public static final OfShort nlink_t = Constants$root.C_SHORT$LAYOUT;
    public static final OfInt id_t = Constants$root.C_INT$LAYOUT;
    public static final OfInt pid_t = Constants$root.C_INT$LAYOUT;
    public static final OfLong off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfInt segsz_t = Constants$root.C_INT$LAYOUT;
    public static final OfInt swblk_t = Constants$root.C_INT$LAYOUT;
    public static final OfInt uid_t = Constants$root.C_INT$LAYOUT;
    public static final OfLong clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong size_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfInt useconds_t = Constants$root.C_INT$LAYOUT;
    public static final OfInt suseconds_t = Constants$root.C_INT$LAYOUT;
    public static final OfLong rsize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfInt errno_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle __darwin_check_fd_set_overflow$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__darwin_check_fd_set_overflow$MH,"__darwin_check_fd_set_overflow");
    }
    public static int __darwin_check_fd_set_overflow(int x0, MemorySegment x1, int x2) {
        var mh$ = __darwin_check_fd_set_overflow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static final OfInt fd_mask = Constants$root.C_INT$LAYOUT;
    public static final OfAddress pthread_t = Constants$root.C_POINTER$LAYOUT;
    public static final OfLong pthread_key_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfInt fsblkcnt_t = Constants$root.C_INT$LAYOUT;
    public static final OfInt fsfilcnt_t = Constants$root.C_INT$LAYOUT;
    public static final OfByte sa_family_t = Constants$root.C_CHAR$LAYOUT;
    public static final OfInt socklen_t = Constants$root.C_INT$LAYOUT;
    public static final OfInt sae_associd_t = Constants$root.C_INT$LAYOUT;
    public static final OfInt sae_connid_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle accept$MH() {
        return RuntimeHelper.requireNonNull(constants$0.accept$MH,"accept");
    }
    public static int accept(int x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = accept$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bind$MH() {
        return RuntimeHelper.requireNonNull(constants$0.bind$MH,"bind");
    }
    public static int bind(int x0, MemorySegment x1, int x2) {
        var mh$ = bind$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle connect$MH() {
        return RuntimeHelper.requireNonNull(constants$0.connect$MH,"connect");
    }
    public static int connect(int x0, MemorySegment x1, int x2) {
        var mh$ = connect$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpeername$MH() {
        return RuntimeHelper.requireNonNull(constants$0.getpeername$MH,"getpeername");
    }
    public static int getpeername(int x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = getpeername$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsockname$MH() {
        return RuntimeHelper.requireNonNull(constants$0.getsockname$MH,"getsockname");
    }
    public static int getsockname(int x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = getsockname$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsockopt$MH() {
        return RuntimeHelper.requireNonNull(constants$1.getsockopt$MH,"getsockopt");
    }
    public static int getsockopt(int x0, int x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = getsockopt$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle listen$MH() {
        return RuntimeHelper.requireNonNull(constants$1.listen$MH,"listen");
    }
    public static int listen(int x0, int x1) {
        var mh$ = listen$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle recv$MH() {
        return RuntimeHelper.requireNonNull(constants$1.recv$MH,"recv");
    }
    public static long recv(int x0, MemorySegment x1, long x2, int x3) {
        var mh$ = recv$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle recvfrom$MH() {
        return RuntimeHelper.requireNonNull(constants$1.recvfrom$MH,"recvfrom");
    }
    public static long recvfrom(int x0, MemorySegment x1, long x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = recvfrom$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle recvmsg$MH() {
        return RuntimeHelper.requireNonNull(constants$1.recvmsg$MH,"recvmsg");
    }
    public static long recvmsg(int x0, MemorySegment x1, int x2) {
        var mh$ = recvmsg$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle send$MH() {
        return RuntimeHelper.requireNonNull(constants$1.send$MH,"send");
    }
    public static long send(int x0, MemorySegment x1, long x2, int x3) {
        var mh$ = send$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sendmsg$MH() {
        return RuntimeHelper.requireNonNull(constants$2.sendmsg$MH,"sendmsg");
    }
    public static long sendmsg(int x0, MemorySegment x1, int x2) {
        var mh$ = sendmsg$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sendto$MH() {
        return RuntimeHelper.requireNonNull(constants$2.sendto$MH,"sendto");
    }
    public static long sendto(int x0, MemorySegment x1, long x2, int x3, MemorySegment x4, int x5) {
        var mh$ = sendto$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setsockopt$MH() {
        return RuntimeHelper.requireNonNull(constants$2.setsockopt$MH,"setsockopt");
    }
    public static int setsockopt(int x0, int x1, int x2, MemorySegment x3, int x4) {
        var mh$ = setsockopt$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle shutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$2.shutdown$MH,"shutdown");
    }
    public static int shutdown(int x0, int x1) {
        var mh$ = shutdown$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sockatmark$MH() {
        return RuntimeHelper.requireNonNull(constants$2.sockatmark$MH,"sockatmark");
    }
    public static int sockatmark(int x0) {
        var mh$ = sockatmark$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle socket$MH() {
        return RuntimeHelper.requireNonNull(constants$2.socket$MH,"socket");
    }
    public static int socket(int x0, int x1, int x2) {
        var mh$ = socket$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle socketpair$MH() {
        return RuntimeHelper.requireNonNull(constants$3.socketpair$MH,"socketpair");
    }
    public static int socketpair(int x0, int x1, int x2, MemorySegment x3) {
        var mh$ = socketpair$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sendfile$MH() {
        return RuntimeHelper.requireNonNull(constants$3.sendfile$MH,"sendfile");
    }
    public static int sendfile(int x0, int x1, long x2, MemorySegment x3, MemorySegment x4, int x5) {
        var mh$ = sendfile$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pfctlinput$MH() {
        return RuntimeHelper.requireNonNull(constants$3.pfctlinput$MH,"pfctlinput");
    }
    public static void pfctlinput(int x0, MemorySegment x1) {
        var mh$ = pfctlinput$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle connectx$MH() {
        return RuntimeHelper.requireNonNull(constants$3.connectx$MH,"connectx");
    }
    public static int connectx(int x0, MemorySegment x1, int x2, int x3, MemorySegment x4, int x5, MemorySegment x6, MemorySegment x7) {
        var mh$ = connectx$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle disconnectx$MH() {
        return RuntimeHelper.requireNonNull(constants$3.disconnectx$MH,"disconnectx");
    }
    public static int disconnectx(int x0, int x1, int x2) {
        var mh$ = disconnectx$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment __DARWIN_SUF_64_BIT_INO_T() {
        return constants$3.__DARWIN_SUF_64_BIT_INO_T$SEGMENT;
    }
    public static MemorySegment __DARWIN_SUF_1050() {
        return constants$4.__DARWIN_SUF_1050$SEGMENT;
    }
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        return constants$4.__DARWIN_SUF_EXTSN$SEGMENT;
    }
    public static long __DARWIN_C_ANSI() {
        return 4096L;
    }
    public static long __DARWIN_C_FULL() {
        return 900000L;
    }
    public static long __DARWIN_C_LEVEL() {
        return 900000L;
    }
    public static long USER_ADDR_NULL() {
        return 0L;
    }
    public static MemorySegment __DARWIN_NULL() {
        return constants$4.__DARWIN_NULL$ADDR;
    }
    public static int __DARWIN_BYTE_ORDER() {
        return (int)1234L;
    }
    public static int LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int BYTE_ORDER() {
        return (int)1234L;
    }
    public static int __MAC_OS_X_VERSION_MIN_REQUIRED() {
        return (int)120000L;
    }
    public static int __MAC_OS_X_VERSION_MAX_ALLOWED() {
        return (int)120300L;
    }
    public static long __DARWIN_NFDBITS() {
        return 32L;
    }
    public static int NBBY() {
        return (int)8L;
    }
    public static long NFDBITS() {
        return 32L;
    }
    public static int FD_SETSIZE() {
        return (int)1024L;
    }
    public static long __DARWIN_ALIGNBYTES() {
        return 7L;
    }
    public static long __DARWIN_ALIGNBYTES32() {
        return 3L;
    }
    public static int KEV_DL_MASTER_ELECTED() {
        return (int)23L;
    }
    public static int SAE_ASSOCID_ALL() {
        return (int)4294967295L;
    }
    public static int SAE_CONNID_ALL() {
        return (int)4294967295L;
    }
    public static int AF_LOCAL() {
        return (int)1L;
    }
    public static int AF_OSI() {
        return (int)7L;
    }
    public static int AF_E164() {
        return (int)28L;
    }
    public static long _SS_ALIGNSIZE() {
        return 8L;
    }
    public static long _SS_PAD1SIZE() {
        return 6L;
    }
    public static long _SS_PAD2SIZE() {
        return 112L;
    }
    public static int PF_UNSPEC() {
        return (int)0L;
    }
    public static int PF_LOCAL() {
        return (int)1L;
    }
    public static int PF_UNIX() {
        return (int)1L;
    }
    public static int PF_INET() {
        return (int)2L;
    }
    public static int PF_IMPLINK() {
        return (int)3L;
    }
    public static int PF_PUP() {
        return (int)4L;
    }
    public static int PF_CHAOS() {
        return (int)5L;
    }
    public static int PF_NS() {
        return (int)6L;
    }
    public static int PF_ISO() {
        return (int)7L;
    }
    public static int PF_OSI() {
        return (int)7L;
    }
    public static int PF_ECMA() {
        return (int)8L;
    }
    public static int PF_DATAKIT() {
        return (int)9L;
    }
    public static int PF_CCITT() {
        return (int)10L;
    }
    public static int PF_SNA() {
        return (int)11L;
    }
    public static int PF_DECnet() {
        return (int)12L;
    }
    public static int PF_DLI() {
        return (int)13L;
    }
    public static int PF_LAT() {
        return (int)14L;
    }
    public static int PF_HYLINK() {
        return (int)15L;
    }
    public static int PF_APPLETALK() {
        return (int)16L;
    }
    public static int PF_ROUTE() {
        return (int)17L;
    }
    public static int PF_LINK() {
        return (int)18L;
    }
    public static int PF_XTP() {
        return (int)19L;
    }
    public static int PF_COIP() {
        return (int)20L;
    }
    public static int PF_CNT() {
        return (int)21L;
    }
    public static int PF_SIP() {
        return (int)24L;
    }
    public static int PF_IPX() {
        return (int)23L;
    }
    public static int PF_RTIP() {
        return (int)22L;
    }
    public static int PF_PIP() {
        return (int)25L;
    }
    public static int PF_NDRV() {
        return (int)27L;
    }
    public static int PF_ISDN() {
        return (int)28L;
    }
    public static int PF_KEY() {
        return (int)29L;
    }
    public static int PF_INET6() {
        return (int)30L;
    }
    public static int PF_NATM() {
        return (int)31L;
    }
    public static int PF_SYSTEM() {
        return (int)32L;
    }
    public static int PF_NETBIOS() {
        return (int)33L;
    }
    public static int PF_PPP() {
        return (int)34L;
    }
    public static int PF_RESERVED_36() {
        return (int)36L;
    }
    public static int PF_UTUN() {
        return (int)38L;
    }
    public static int PF_VSOCK() {
        return (int)40L;
    }
    public static int PF_MAX() {
        return (int)41L;
    }
    public static int NET_MAXID() {
        return (int)41L;
    }
}


