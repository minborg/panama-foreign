// Generated by jextract

package jdk.internal.include.sys;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;

import static java.lang.foreign.ValueLayout.PathElement;
public class sf_hdtr {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("headers"),
        Constants$root.C_INT$LAYOUT.withName("hdr_cnt"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("trailers"),
        Constants$root.C_INT$LAYOUT.withName("trl_cnt"),
        MemoryLayout.paddingLayout(32)
    ).withName("sf_hdtr");
    public static MemoryLayout $LAYOUT() {
        return sf_hdtr.$struct$LAYOUT;
    }
    static final VarHandle headers$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("headers"));
    public static VarHandle headers$VH() {
        return sf_hdtr.headers$VH;
    }
    public static MemorySegment headers$get(MemorySegment seg) {
        return (MemorySegment)sf_hdtr.headers$VH.get(seg);
    }
    public static void headers$set(MemorySegment seg, MemorySegment x) {
        sf_hdtr.headers$VH.set(seg, x);
    }
    public static MemorySegment headers$get(MemorySegment seg, long index) {
        return (MemorySegment)sf_hdtr.headers$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void headers$set(MemorySegment seg, long index, MemorySegment x) {
        sf_hdtr.headers$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hdr_cnt$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("hdr_cnt"));
    public static VarHandle hdr_cnt$VH() {
        return sf_hdtr.hdr_cnt$VH;
    }
    public static int hdr_cnt$get(MemorySegment seg) {
        return (int)sf_hdtr.hdr_cnt$VH.get(seg);
    }
    public static void hdr_cnt$set(MemorySegment seg, int x) {
        sf_hdtr.hdr_cnt$VH.set(seg, x);
    }
    public static int hdr_cnt$get(MemorySegment seg, long index) {
        return (int)sf_hdtr.hdr_cnt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hdr_cnt$set(MemorySegment seg, long index, int x) {
        sf_hdtr.hdr_cnt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle trailers$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("trailers"));
    public static VarHandle trailers$VH() {
        return sf_hdtr.trailers$VH;
    }
    public static MemorySegment trailers$get(MemorySegment seg) {
        return (MemorySegment)sf_hdtr.trailers$VH.get(seg);
    }
    public static void trailers$set(MemorySegment seg, MemorySegment x) {
        sf_hdtr.trailers$VH.set(seg, x);
    }
    public static MemorySegment trailers$get(MemorySegment seg, long index) {
        return (MemorySegment)sf_hdtr.trailers$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void trailers$set(MemorySegment seg, long index, MemorySegment x) {
        sf_hdtr.trailers$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle trl_cnt$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("trl_cnt"));
    public static VarHandle trl_cnt$VH() {
        return sf_hdtr.trl_cnt$VH;
    }
    public static int trl_cnt$get(MemorySegment seg) {
        return (int)sf_hdtr.trl_cnt$VH.get(seg);
    }
    public static void trl_cnt$set(MemorySegment seg, int x) {
        sf_hdtr.trl_cnt$VH.set(seg, x);
    }
    public static int trl_cnt$get(MemorySegment seg, long index) {
        return (int)sf_hdtr.trl_cnt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void trl_cnt$set(MemorySegment seg, long index, int x) {
        sf_hdtr.trl_cnt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


