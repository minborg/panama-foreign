// Generated by jextract

package jdk.internal.include.netinet;

import jdk.internal.include.common.RuntimeHelper;
import jdk.internal.include.common.Util;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;

import static java.lang.foreign.MemoryLayout.PathElement;

public final class SockaddrStruct {

    // Suppresses default constructor, ensuring non-instantiability.
    private SockaddrStruct() {
    }

    private static final MemoryLayout LAYOUT = Util.networkOrder(sockaddr.$LAYOUT());

    public static MemoryLayout layout() {
        return LAYOUT;
    }

    static final VarHandle sa_len$VH = layout().varHandle(MemoryLayout.PathElement.groupElement("sa_len"));
    public static VarHandle sa_len$VH() {
        return sa_len$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __uint8_t sa_len;
     * }
     */
    public static byte sa_len$get(MemorySegment seg) {
        return (byte)sa_len$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __uint8_t sa_len;
     * }
     */
    public static void sa_len$set(MemorySegment seg, byte x) {
        sa_len$VH.set(seg, x);
    }
    public static byte sa_len$get(MemorySegment seg, long index) {
        return (byte)sa_len$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sa_len$set(MemorySegment seg, long index, byte x) {
        sa_len$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sa_family$VH = layout().varHandle(MemoryLayout.PathElement.groupElement("sa_family"));
    public static VarHandle sa_family$VH() {
        return sa_family$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * sa_family_t sa_family;
     * }
     */
    public static byte sa_family$get(MemorySegment seg) {
        return (byte)sa_family$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * sa_family_t sa_family;
     * }
     */
    public static void sa_family$set(MemorySegment seg, byte x) {
        sa_family$VH.set(seg, x);
    }
    public static byte sa_family$get(MemorySegment seg, long index) {
        return (byte)sa_family$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sa_family$set(MemorySegment seg, long index, byte x) {
        sa_family$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment sa_data$slice(MemorySegment seg) {
        return seg.asSlice(2, 14);
    }
    public static long sizeof() { return layout().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate(layout()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, layout()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, layout(), 1, scope); }

}


